<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\TIMER_TEST.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\TIMER_TEST.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 481]: Last Updated: Sun Oct 23 05:19:55 2011
<BR><P>
<H3>Maximum Stack Usage =        312 bytes + Unknown(Functions without stacksize, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
_printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[a]">__ENTRY</a>
 <LI><a href="#[b]">StartPointAfterSleepWakeUp</a>
 <LI><a href="#[c]">Led_Test</a>
 <LI><a href="#[d]">CLKDIV124</a>
 <LI><a href="#[e]">CLKDIV144</a>
 <LI><a href="#[da]">EnterCritical</a>
 <LI><a href="#[db]">ExitCritical</a>
 <LI><a href="#[5a]">SET_IF</a>
 <LI><a href="#[dc]">WR_IF</a>
 <LI><a href="#[5b]">CLR_IF</a>
 <LI><a href="#[dd]">outportw</a>
 <LI><a href="#[de]">inportw</a>
 <LI><a href="#[df]">MMU_EnableICache</a>
 <LI><a href="#[e0]">MMU_DisableICache</a>
 <LI><a href="#[e1]">MMU_EnableDCache</a>
 <LI><a href="#[e2]">MMU_DisableDCache</a>
 <LI><a href="#[e3]">MMU_EnableAlignFault</a>
 <LI><a href="#[e4]">MMU_DisableAlignFault</a>
 <LI><a href="#[e5]">MMU_EnableMMU</a>
 <LI><a href="#[e6]">MMU_DisableMMU</a>
 <LI><a href="#[58]">MMU_SetFastBusMode</a>
 <LI><a href="#[57]">MMU_SetAsyncBusMode</a>
 <LI><a href="#[e7]">MMU_SetTTBase</a>
 <LI><a href="#[e8]">MMU_SetDomain</a>
 <LI><a href="#[e9]">MMU_InvalidateIDCache</a>
 <LI><a href="#[ea]">MMU_InvalidateICache</a>
 <LI><a href="#[eb]">MMU_InvalidateICacheMVA</a>
 <LI><a href="#[ec]">MMU_PrefetchICacheMVA</a>
 <LI><a href="#[ed]">MMU_InvalidateDCache</a>
 <LI><a href="#[ee]">MMU_InvalidateDCacheMVA</a>
 <LI><a href="#[ef]">MMU_CleanDCacheMVA</a>
 <LI><a href="#[f0]">MMU_CleanInvalidateDCacheMVA</a>
 <LI><a href="#[f1]">MMU_CleanDCacheIndex</a>
 <LI><a href="#[f2]">MMU_CleanInvalidateDCacheIndex</a>
 <LI><a href="#[f3]">MMU_WaitForInterrupt</a>
 <LI><a href="#[f4]">MMU_InvalidateTLB</a>
 <LI><a href="#[f5]">MMU_InvalidateITLB</a>
 <LI><a href="#[f6]">MMU_InvalidateITLBMVA</a>
 <LI><a href="#[f7]">MMU_InvalidateDTLB</a>
 <LI><a href="#[f8]">MMU_InvalidateDTLBMVA</a>
 <LI><a href="#[f9]">MMU_SetDCacheLockdownBase</a>
 <LI><a href="#[fa]">MMU_SetICacheLockdownBase</a>
 <LI><a href="#[fb]">MMU_SetDTLBLockdown</a>
 <LI><a href="#[fc]">MMU_SetITLBLockdown</a>
 <LI><a href="#[fd]">MMU_SetProcessId</a>
 <LI><a href="#[9]">ResetEntry</a>
 <LI><a href="#[5]">IsrIRQ</a>
 <LI><a href="#[3]">copy_proc_beg</a>
 <LI><a href="#[4]">[Anonymous Symbol]</a>
</UL>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[9]">ResetEntry</a> from 2440init.o(RESET) referenced from 2440init.o(RESET)
 <LI><a href="#[3]">copy_proc_beg</a> from 2440init.o(RESET) referenced from 2440init.o(RESET)
 <LI><a href="#[4]">[Anonymous Symbol]</a> from 2440init.o(RESET) referenced from 2440init.o(RESET)
 <LI><a href="#[5]">IsrIRQ</a> from 2440init.o(RESET) referenced from 2440init.o(RESET)
 <LI><a href="#[6]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[7]">_sputc</a> from _sputc.o(.text) referenced from c89vsprintf.o(.text)
 <LI><a href="#[8]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[a]"></a>__ENTRY</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2440init.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[b]"></a>StartPointAfterSleepWakeUp</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2440init.o(RESET), UNUSED, KEPT)
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_proc_beg
</UL>

<P><STRONG><a name="[c]"></a>Led_Test</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2440init.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[d]"></a>CLKDIV124</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2440init.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[e]"></a>CLKDIV144</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2440init.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[10]"></a>_printf_n</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount (via Veneer)
</UL>

<P><STRONG><a name="[9c]"></a>_printf_percent</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf (via Veneer)
</UL>

<P><STRONG><a name="[12]"></a>_printf_p</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr (via Veneer)
</UL>

<P><STRONG><a name="[14]"></a>_printf_f</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[16]"></a>_printf_e</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[17]"></a>_printf_g</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[18]"></a>_printf_a</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex (Weak Reference)
</UL>

<P><STRONG><a name="[c0]"></a>_printf_ll</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[1a]"></a>_printf_i</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[1c]"></a>_printf_d</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[1d]"></a>_printf_u</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[1e]"></a>_printf_o</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct (via Veneer)
</UL>

<P><STRONG><a name="[20]"></a>_printf_x</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex (via Veneer)
</UL>

<P><STRONG><a name="[22]"></a>_printf_lli</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec (via Veneer)
</UL>

<P><STRONG><a name="[24]"></a>_printf_lld</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec (via Veneer)
</UL>

<P><STRONG><a name="[25]"></a>_printf_llu</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec (via Veneer)
</UL>

<P><STRONG><a name="[26]"></a>_printf_llo</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct (via Veneer)
</UL>

<P><STRONG><a name="[28]"></a>_printf_llx</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex (via Veneer)
</UL>

<P><STRONG><a name="[c1]"></a>_printf_l</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[2a]"></a>_printf_c</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char (via Veneer)
</UL>

<P><STRONG><a name="[2c]"></a>_printf_s</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string (via Veneer)
</UL>

<P><STRONG><a name="[2e]"></a>_printf_lc</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar (via Veneer)
</UL>

<P><STRONG><a name="[30]"></a>_printf_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring (via Veneer)
</UL>

<P><STRONG><a name="[c2]"></a>_printf_percent_end</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[c3]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __rt_lib_init_lc_ctype_2
</UL>

<P><STRONG><a name="[c4]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[32]"></a>light</STRONG> (ARM, 140 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[c5]"></a>bright</STRONG> (ARM, 56 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[f]"></a>Main</STRONG> (ARM, 288 bytes, Stack size 72 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156 + Unknown Stack Size
<LI>Call Chain = Main &rArr; BK1086_SetFreq &rArr; Radio_Reg_Write &rArr; BEKEN_I2C_sendbyte &rArr; I2C_SCL_L &rArr; ClearGPIO &rArr; Set_GPIO_To_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eint0_init
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tuner_Init
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGPIO
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Reg_Write
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Reg_Read
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_TFT_Init
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK1086_SetFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[3c]"></a>Delay</STRONG> (ARM, 224 bytes, Stack size 16 bytes, 2440lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep
</UL>

<P><STRONG><a name="[c6]"></a>Port_Init0</STRONG> (ARM, 160 bytes, Stack size 0 bytes, 2440lib.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>Port_Init</STRONG> (ARM, 160 bytes, Stack size 0 bytes, 2440lib.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>Uart_Init</STRONG> (ARM, 456 bytes, Stack size 56 bytes, 2440lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[c8]"></a>Uart_Select</STRONG> (ARM, 12 bytes, Stack size 0 bytes, 2440lib.o(.text), UNUSED)

<P><STRONG><a name="[c9]"></a>Uart_TxEmpty</STRONG> (ARM, 96 bytes, Stack size 0 bytes, 2440lib.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>Uart_Getch</STRONG> (ARM, 152 bytes, Stack size 0 bytes, 2440lib.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BackLight_Control
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_PWM_Test
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_GetIntNum_GJ
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_GetString
</UL>

<P><STRONG><a name="[ca]"></a>Uart_GetKey</STRONG> (ARM, 164 bytes, Stack size 0 bytes, 2440lib.o(.text), UNUSED)

<P><STRONG><a name="[44]"></a>Uart_SendByte</STRONG> (ARM, 264 bytes, Stack size 0 bytes, 2440lib.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_GetIntNum_GJ
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_GetString
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendString
</UL>

<P><STRONG><a name="[43]"></a>Uart_SendString</STRONG> (ARM, 40 bytes, Stack size 4 bytes, 2440lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Printf
</UL>

<P><STRONG><a name="[45]"></a>Uart_Printf</STRONG> (ARM, 56 bytes, Stack size 280 bytes, 2440lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf (via Veneer)
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendString
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BackLight_Control
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_PWM_Test
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_GetString
</UL>

<P><STRONG><a name="[47]"></a>Uart_GetString</STRONG> (ARM, 100 bytes, Stack size 16 bytes, 2440lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Printf
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendByte
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Getch
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_GetIntNum
</UL>

<P><STRONG><a name="[49]"></a>Uart_GetIntNum</STRONG> (ARM, 464 bytes, Stack size 64 bytes, 2440lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi (via Veneer)
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_GetString
</UL>

<P><STRONG><a name="[4d]"></a>Uart_GetIntNum_GJ</STRONG> (ARM, 164 bytes, Stack size 32 bytes, 2440lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendByte
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Getch
</UL>

<P><STRONG><a name="[cb]"></a>Led_Display</STRONG> (ARM, 36 bytes, Stack size 0 bytes, 2440lib.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>Buzzer_Freq_Set</STRONG> (ARM, 212 bytes, Stack size 8 bytes, 2440lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_PWM_Test
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep
</UL>

<P><STRONG><a name="[50]"></a>Buzzer_Stop</STRONG> (ARM, 56 bytes, Stack size 0 bytes, 2440lib.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_PWM_Test
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep
</UL>

<P><STRONG><a name="[4f]"></a>Beep</STRONG> (ARM, 40 bytes, Stack size 16 bytes, 2440lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_Stop
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_Freq_Set
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>

<P><STRONG><a name="[51]"></a>BUZZER_PWM_Test</STRONG> (ARM, 160 bytes, Stack size 16 bytes, 2440lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_Stop
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_Freq_Set
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Printf
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Getch
</UL>

<P><STRONG><a name="[52]"></a>LcdBkLtSet</STRONG> (ARM, 416 bytes, Stack size 8 bytes, 2440lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = LcdBkLtSet
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BackLight_Control
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_TFT_Init
</UL>

<P><STRONG><a name="[53]"></a>LCD_BackLight_Control</STRONG> (ARM, 152 bytes, Stack size 16 bytes, 2440lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdBkLtSet
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Printf
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Getch
</UL>

<P><STRONG><a name="[54]"></a>Timer_Start</STRONG> (ARM, 84 bytes, Stack size 8 bytes, 2440lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[55]"></a>Timer_Stop</STRONG> (ARM, 60 bytes, Stack size 8 bytes, 2440lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[cc]"></a>ChangeMPllValue</STRONG> (ARM, 24 bytes, Stack size 0 bytes, 2440lib.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>ChangeClockDivider</STRONG> (ARM, 496 bytes, Stack size 24 bytes, 2440lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_SetFastBusMode
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_SetAsyncBusMode
</UL>

<P><STRONG><a name="[cd]"></a>ChangeUPllValue</STRONG> (ARM, 24 bytes, Stack size 0 bytes, 2440lib.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>malloc</STRONG> (ARM, 104 bytes, Stack size 0 bytes, 2440lib.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>free</STRONG> (ARM, 12 bytes, Stack size 0 bytes, 2440lib.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>Lcd_Init</STRONG> (ARM, 184 bytes, Stack size 0 bytes, lcd_tft.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_TFT_Init
</UL>

<P><STRONG><a name="[62]"></a>Lcd_EnvidOnOff</STRONG> (ARM, 60 bytes, Stack size 0 bytes, lcd_tft.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_TFT_Init
</UL>

<P><STRONG><a name="[59]"></a>Lcd_MoveViewPort</STRONG> (ARM, 108 bytes, Stack size 16 bytes, lcd_tft.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLR_IF
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_IF
</UL>

<P><STRONG><a name="[5d]"></a>PutPixel</STRONG> (ARM, 48 bytes, Stack size 4 bytes, lcd_tft.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PutPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w_symbol_16x16
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w_symbol
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w_hanzi_16
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_Line
</UL>

<P><STRONG><a name="[63]"></a>Lcd_ClearScr</STRONG> (ARM, 76 bytes, Stack size 4 bytes, lcd_tft.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Lcd_ClearScr
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT0_ISR
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_TFT_Init
</UL>

<P><STRONG><a name="[5c]"></a>Glib_Line</STRONG> (ARM, 648 bytes, Stack size 36 bytes, lcd_tft.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Glib_Line &rArr; PutPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_FilledRectangle
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_Rectangle
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_TFT_Init
</UL>

<P><STRONG><a name="[5e]"></a>Glib_Rectangle</STRONG> (ARM, 128 bytes, Stack size 28 bytes, lcd_tft.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_Line
</UL>

<P><STRONG><a name="[5f]"></a>Glib_FilledRectangle</STRONG> (ARM, 76 bytes, Stack size 32 bytes, lcd_tft.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Glib_FilledRectangle &rArr; Glib_Line &rArr; PutPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_Line
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_TFT_Init
</UL>

<P><STRONG><a name="[d0]"></a>Paint_Bmp</STRONG> (ARM, 116 bytes, Stack size 24 bytes, lcd_tft.o(.text), UNUSED)

<P><STRONG><a name="[35]"></a>Lcd_TFT_Init</STRONG> (ARM, 328 bytes, Stack size 8 bytes, lcd_tft.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = Lcd_TFT_Init &rArr; Glib_FilledRectangle &rArr; Glib_Line &rArr; PutPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_FilledRectangle
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_Line
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_ClearScr
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_EnvidOnOff
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_PowerEnable
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdBkLtSet
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main
</UL>

<P><STRONG><a name="[64]"></a>w_hanzi_16</STRONG> (ARM, 260 bytes, Stack size 52 bytes, lcd_tft.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutPixel
</UL>

<P><STRONG><a name="[65]"></a>w_symbol</STRONG> (ARM, 120 bytes, Stack size 52 bytes, lcd_tft.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutPixel
</UL>

<P><STRONG><a name="[66]"></a>w_symbol_16x16</STRONG> (ARM, 196 bytes, Stack size 52 bytes, lcd_tft.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutPixel
</UL>

<P><STRONG><a name="[67]"></a>EINT0_ISR</STRONG> (ARM, 288 bytes, Stack size 32 bytes, eint.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_ClearScr
</UL>

<P><STRONG><a name="[36]"></a>eint0_init</STRONG> (ARM, 160 bytes, Stack size 0 bytes, eint.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main
</UL>

<P><STRONG><a name="[6b]"></a>Set_GPIO_To_Input</STRONG> (ARM, 420 bytes, Stack size 4 bytes, io_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Set_GPIO_To_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Data_in
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGPIO
</UL>

<P><STRONG><a name="[68]"></a>Set_GPIO_To_Output</STRONG> (ARM, 672 bytes, Stack size 4 bytes, io_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Set_GPIO_To_Output
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Clk_out
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Data_out
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearGPIO
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGPIO
</UL>

<P><STRONG><a name="[3a]"></a>SetGPIO</STRONG> (ARM, 392 bytes, Stack size 16 bytes, io_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetGPIO &rArr; Set_GPIO_To_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_To_Output
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SCL_H
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SDA_H
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main
</UL>

<P><STRONG><a name="[69]"></a>ClearGPIO</STRONG> (ARM, 392 bytes, Stack size 16 bytes, io_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ClearGPIO &rArr; Set_GPIO_To_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_To_Output
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SCL_L
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SDA_L
</UL>

<P><STRONG><a name="[6a]"></a>GetGPIO</STRONG> (ARM, 540 bytes, Stack size 16 bytes, io_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetGPIO &rArr; Set_GPIO_To_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_To_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SDA_GET
</UL>

<P><STRONG><a name="[d1]"></a>PollUpGPIO</STRONG> (ARM, 640 bytes, Stack size 4 bytes, io_api.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>delay_us</STRONG> (ARM, 36 bytes, Stack size 0 bytes, radio_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_i2c
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[33]"></a>delay_ms</STRONG> (ARM, 48 bytes, Stack size 8 bytes, radio_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK1086_ValidStop
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_FM_StereoMono
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tuner_Init
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light
</UL>

<P><STRONG><a name="[38]"></a>Radio_Reg_Write</STRONG> (ARM, 104 bytes, Stack size 24 bytes, radio_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Radio_Reg_Write &rArr; BEKEN_I2C_sendbyte &rArr; I2C_SCL_L &rArr; ClearGPIO &rArr; Set_GPIO_To_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEKEN_I2C_sendbyte
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEKEN_I2C_Stop
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEKEN_I2C_Start
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEKEN_I2C_ReceiveACK
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK1086_SetVolumeLevel
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK1086_POWER
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_FM_StereoMono
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuner_mute
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tuner_Init
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK1086_SetFreq
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main
</UL>

<P><STRONG><a name="[39]"></a>Radio_Reg_Read</STRONG> (ARM, 124 bytes, Stack size 24 bytes, radio_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Radio_Reg_Read &rArr; BEKEN_I2C_sendbyte &rArr; I2C_SCL_L &rArr; ClearGPIO &rArr; Set_GPIO_To_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEKEN_I2C_sendbyte
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEKEN_I2C_readbyte
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEKEN_I2C_nack
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEKEN_I2C_ack
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEKEN_I2C_Stop
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEKEN_I2C_Start
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEKEN_I2C_ReceiveACK
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK1086_SetVolumeLevel
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK1086_ValidStop
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK1086_POWER
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_FM_StereoMono
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuner_mute
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main
</UL>

<P><STRONG><a name="[74]"></a>tuner_mute</STRONG> (ARM, 84 bytes, Stack size 16 bytes, radio_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Reg_Write
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Reg_Read
</UL>

<P><STRONG><a name="[75]"></a>Set_FM_StereoMono</STRONG> (ARM, 152 bytes, Stack size 8 bytes, radio_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Reg_Write
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Reg_Read
</UL>

<P><STRONG><a name="[76]"></a>BK1086_POWER</STRONG> (ARM, 96 bytes, Stack size 16 bytes, radio_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Reg_Write
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Reg_Read
</UL>

<P><STRONG><a name="[77]"></a>BK1086_FreqToChan</STRONG> (ARM, 44 bytes, Stack size 16 bytes, radio_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = BK1086_FreqToChan
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK1086_SetFreq
</UL>

<P><STRONG><a name="[3b]"></a>BK1086_SetFreq</STRONG> (ARM, 100 bytes, Stack size 16 bytes, radio_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = BK1086_SetFreq &rArr; Radio_Reg_Write &rArr; BEKEN_I2C_sendbyte &rArr; I2C_SCL_L &rArr; ClearGPIO &rArr; Set_GPIO_To_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK1086_FreqToChan
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Reg_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK1086_ValidStop
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main
</UL>

<P><STRONG><a name="[78]"></a>BK1086_ValidStop</STRONG> (ARM, 336 bytes, Stack size 32 bytes, radio_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Reg_Read
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK1086_SetFreq
</UL>

<P><STRONG><a name="[37]"></a>Tuner_Init</STRONG> (ARM, 72 bytes, Stack size 8 bytes, radio_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Tuner_Init &rArr; Radio_Reg_Write &rArr; BEKEN_I2C_sendbyte &rArr; I2C_SCL_L &rArr; ClearGPIO &rArr; Set_GPIO_To_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Reg_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main
</UL>

<P><STRONG><a name="[79]"></a>BK1086_SetVolumeLevel</STRONG> (ARM, 76 bytes, Stack size 16 bytes, radio_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Reg_Write
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Reg_Read
</UL>

<P><STRONG><a name="[7a]"></a>Set_Data_in</STRONG> (ARM, 20 bytes, Stack size 8 bytes, fm_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Set_Data_in &rArr; Set_GPIO_To_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_To_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK1086_i2c_byte_r
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK1086_i2c_ack
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEKEN_I2C_readbyte
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEKEN_I2C_ReceiveACK
</UL>

<P><STRONG><a name="[7b]"></a>Set_Data_out</STRONG> (ARM, 20 bytes, Stack size 8 bytes, fm_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Set_Data_out &rArr; Set_GPIO_To_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_To_Output
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEKEN_I2C_init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEKEN_I2C_sendbyte
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEKEN_I2C_nack
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEKEN_I2C_ack
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEKEN_I2C_Stop
</UL>

<P><STRONG><a name="[7c]"></a>Set_Clk_out</STRONG> (ARM, 20 bytes, Stack size 8 bytes, fm_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Set_Clk_out &rArr; Set_GPIO_To_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_To_Output
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEKEN_I2C_init
</UL>

<P><STRONG><a name="[7d]"></a>I2C_SDA_H</STRONG> (ARM, 20 bytes, Stack size 8 bytes, fm_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = I2C_SDA_H &rArr; SetGPIO &rArr; Set_GPIO_To_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGPIO
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEKEN_I2C_init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK1086_i2c_byte_r
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK1086_i2c_byte_w
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK1086_i2c_stop_sig
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK1086_i2c_start_sig
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEKEN_I2C_sendbyte
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEKEN_I2C_nack
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEKEN_I2C_Stop
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEKEN_I2C_Start
</UL>

<P><STRONG><a name="[7e]"></a>I2C_SDA_L</STRONG> (ARM, 20 bytes, Stack size 8 bytes, fm_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = I2C_SDA_L &rArr; ClearGPIO &rArr; Set_GPIO_To_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearGPIO
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK1086_i2c_byte_w
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK1086_i2c_stop_sig
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK1086_i2c_start_sig
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEKEN_I2C_sendbyte
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEKEN_I2C_ack
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEKEN_I2C_Stop
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEKEN_I2C_Start
</UL>

<P><STRONG><a name="[7f]"></a>I2C_SCL_H</STRONG> (ARM, 20 bytes, Stack size 8 bytes, fm_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = I2C_SCL_H &rArr; SetGPIO &rArr; Set_GPIO_To_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGPIO
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEKEN_I2C_init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK1086_i2c_byte_r
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK1086_i2c_byte_w
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK1086_i2c_ack
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK1086_i2c_stop_sig
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK1086_i2c_start_sig
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEKEN_I2C_sendbyte
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEKEN_I2C_readbyte
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEKEN_I2C_nack
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEKEN_I2C_ack
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEKEN_I2C_Stop
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEKEN_I2C_ReceiveACK
</UL>

<P><STRONG><a name="[80]"></a>I2C_SCL_L</STRONG> (ARM, 20 bytes, Stack size 8 bytes, fm_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = I2C_SCL_L &rArr; ClearGPIO &rArr; Set_GPIO_To_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearGPIO
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK1086_i2c_byte_r
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK1086_i2c_byte_w
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK1086_i2c_ack
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEKEN_I2C_sendbyte
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEKEN_I2C_readbyte
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEKEN_I2C_nack
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEKEN_I2C_ack
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEKEN_I2C_Start
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEKEN_I2C_ReceiveACK
</UL>

<P><STRONG><a name="[81]"></a>I2C_SDA_GET</STRONG> (ARM, 20 bytes, Stack size 8 bytes, fm_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = I2C_SDA_GET &rArr; GetGPIO &rArr; Set_GPIO_To_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGPIO
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK1086_i2c_byte_r
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK1086_i2c_ack
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEKEN_I2C_readbyte
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEKEN_I2C_ReceiveACK
</UL>

<P><STRONG><a name="[82]"></a>delay_i2c</STRONG> (ARM, 24 bytes, Stack size 8 bytes, fm_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_i2c
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK1086_i2c_byte_r
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK1086_i2c_byte_w
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK1086_i2c_ack
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK1086_i2c_stop_sig
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK1086_i2c_start_sig
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEKEN_I2C_sendbyte
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEKEN_I2C_readbyte
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEKEN_I2C_nack
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEKEN_I2C_ack
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEKEN_I2C_Stop
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEKEN_I2C_Start
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEKEN_I2C_ReceiveACK
</UL>

<P><STRONG><a name="[83]"></a>BK1086_i2c_start_sig</STRONG> (ARM, 48 bytes, Stack size 8 bytes, fm_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_i2c
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SCL_H
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SDA_L
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SDA_H
</UL>

<P><STRONG><a name="[84]"></a>BK1086_i2c_stop_sig</STRONG> (ARM, 48 bytes, Stack size 8 bytes, fm_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_i2c
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SCL_H
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SDA_L
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SDA_H
</UL>

<P><STRONG><a name="[85]"></a>BK1086_i2c_ack</STRONG> (ARM, 68 bytes, Stack size 8 bytes, fm_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_i2c
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SDA_GET
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SCL_L
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SCL_H
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Data_in
</UL>

<P><STRONG><a name="[86]"></a>BK1086_i2c_byte_w</STRONG> (ARM, 128 bytes, Stack size 16 bytes, fm_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_i2c
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SCL_L
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SCL_H
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SDA_L
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SDA_H
</UL>

<P><STRONG><a name="[87]"></a>BK1086_i2c_byte_r</STRONG> (ARM, 128 bytes, Stack size 16 bytes, fm_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_i2c
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SDA_GET
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SCL_L
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SCL_H
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SDA_H
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Data_in
</UL>

<P><STRONG><a name="[88]"></a>BEKEN_I2C_init</STRONG> (ARM, 28 bytes, Stack size 8 bytes, fm_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BEKEN_I2C_init &rArr; I2C_SCL_H &rArr; SetGPIO &rArr; Set_GPIO_To_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SCL_H
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SDA_H
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Clk_out
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Data_out
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEKEN_I2C_Start
</UL>

<P><STRONG><a name="[6d]"></a>BEKEN_I2C_Start</STRONG> (ARM, 52 bytes, Stack size 8 bytes, fm_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = BEKEN_I2C_Start &rArr; BEKEN_I2C_init &rArr; I2C_SCL_H &rArr; SetGPIO &rArr; Set_GPIO_To_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEKEN_I2C_init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_i2c
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SCL_L
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SDA_L
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SDA_H
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Reg_Write
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Reg_Read
</UL>

<P><STRONG><a name="[70]"></a>BEKEN_I2C_Stop</STRONG> (ARM, 52 bytes, Stack size 8 bytes, fm_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BEKEN_I2C_Stop &rArr; I2C_SCL_H &rArr; SetGPIO &rArr; Set_GPIO_To_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_i2c
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SCL_H
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SDA_L
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SDA_H
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Data_out
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Reg_Write
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Reg_Read
</UL>

<P><STRONG><a name="[72]"></a>BEKEN_I2C_ack</STRONG> (ARM, 48 bytes, Stack size 8 bytes, fm_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BEKEN_I2C_ack &rArr; I2C_SCL_L &rArr; ClearGPIO &rArr; Set_GPIO_To_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_i2c
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SCL_L
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SCL_H
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SDA_L
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Data_out
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Reg_Read
</UL>

<P><STRONG><a name="[73]"></a>BEKEN_I2C_nack</STRONG> (ARM, 48 bytes, Stack size 8 bytes, fm_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BEKEN_I2C_nack &rArr; I2C_SCL_L &rArr; ClearGPIO &rArr; Set_GPIO_To_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_i2c
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SCL_L
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SCL_H
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SDA_H
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Data_out
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Reg_Read
</UL>

<P><STRONG><a name="[6f]"></a>BEKEN_I2C_ReceiveACK</STRONG> (ARM, 60 bytes, Stack size 8 bytes, fm_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BEKEN_I2C_ReceiveACK &rArr; I2C_SDA_GET &rArr; GetGPIO &rArr; Set_GPIO_To_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_i2c
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SDA_GET
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SCL_L
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SCL_H
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Data_in
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Reg_Write
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Reg_Read
</UL>

<P><STRONG><a name="[6e]"></a>BEKEN_I2C_sendbyte</STRONG> (ARM, 104 bytes, Stack size 16 bytes, fm_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = BEKEN_I2C_sendbyte &rArr; I2C_SCL_L &rArr; ClearGPIO &rArr; Set_GPIO_To_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_i2c
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SCL_L
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SCL_H
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SDA_L
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SDA_H
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Data_out
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Reg_Write
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Reg_Read
</UL>

<P><STRONG><a name="[71]"></a>BEKEN_I2C_readbyte</STRONG> (ARM, 104 bytes, Stack size 16 bytes, fm_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = BEKEN_I2C_readbyte &rArr; I2C_SDA_GET &rArr; GetGPIO &rArr; Set_GPIO_To_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_i2c
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SDA_GET
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SCL_L
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SCL_H
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Data_in
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Reg_Read
</UL>

<P><STRONG><a name="[4c]"></a>__rt_ctype_table</STRONG> (ARM, 24 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_GetIntNum
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb (via Veneer)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol (via Veneer)
</UL>

<P><STRONG><a name="[46]"></a>__c89vsprintf</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, c89vsprintf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Printf (via Veneer)
</UL>

<P><STRONG><a name="[4b]"></a>atoi</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, atoi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr (via Veneer)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_GetIntNum (via Veneer)
</UL>

<P><STRONG><a name="[4a]"></a>strlen</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, strlen.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_GetIntNum (via Veneer)
</UL>

<P><STRONG><a name="[34]"></a>__aeabi_memclr4</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main
</UL>

<P><STRONG><a name="[d2]"></a>__aeabi_memclr8</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>__rt_memclr_w</STRONG> (ARM, 84 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[d4]"></a>_memset_w</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[d5]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>__aeabi_idivmod</STRONG> (ARM, 384 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento (via Veneer)
</UL>

<P><STRONG><a name="[89]"></a>__rt_locale</STRONG> (ARM, 16 bytes, Stack size 0 bytes, rt_locale.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real (via Veneer)
</UL>

<P><STRONG><a name="[8b]"></a>__aeabi_errno_addr</STRONG> (ARM, 16 bytes, Stack size 0 bytes, rt_errno_addr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi (via Veneer)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul (via Veneer)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol (via Veneer)
</UL>

<P><STRONG><a name="[d6]"></a>__errno</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_errno_addr.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>__rt_errno_addr</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_errno_addr.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>_printf_pre_padding</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[8f]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[91]"></a>_printf_truncate_signed</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[92]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[90]"></a>_printf_str</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[1b]"></a>_printf_int_dec</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10 (via Veneer)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u (via Veneer)
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d (via Veneer)
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i (via Veneer)
</UL>

<P><STRONG><a name="[11]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n (via Veneer)
</UL>

<P><STRONG><a name="[8a]"></a>_printf_char_common</STRONG> (Thumb, 34 bytes, Stack size 64 bytes, _printf_char_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>

<P><STRONG><a name="[7]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> c89vsprintf.o(.text)
</UL>
<P><STRONG><a name="[96]"></a>_printf_wctomb</STRONG> (Thumb, 188 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[23]"></a>_printf_longlong_dec</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu (via Veneer)
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld (via Veneer)
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli (via Veneer)
</UL>

<P><STRONG><a name="[99]"></a>_printf_longlong_oct</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[1f]"></a>_printf_int_oct</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o (via Veneer)
</UL>

<P><STRONG><a name="[27]"></a>_printf_ll_oct</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo (via Veneer)
</UL>

<P><STRONG><a name="[9a]"></a>_printf_longlong_hex</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[21]"></a>_printf_int_hex</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x (via Veneer)
</UL>

<P><STRONG><a name="[29]"></a>_printf_ll_hex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx (via Veneer)
</UL>

<P><STRONG><a name="[13]"></a>_printf_hex_ptr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p (via Veneer)
</UL>

<P><STRONG><a name="[95]"></a>__printf</STRONG> (Thumb, 420 bytes, Stack size 32 bytes, __printf_flags_ss_wp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r1
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[8c]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr (via Veneer)
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table (via Veneer)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[98]"></a>_ll_udiv10</STRONG> (ARM, 160 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec (via Veneer)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via Veneer)
</UL>

<P><STRONG><a name="[94]"></a>_printf_int_common</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[d8]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>_printf_fp_dec_real</STRONG> (Thumb, 616 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale (via Veneer)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify (via Veneer)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10 (via Veneer)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec (via Veneer)
</UL>

<P><STRONG><a name="[a6]"></a>_printf_cs_common</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[2b]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c (via Veneer)
</UL>

<P><STRONG><a name="[2d]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s (via Veneer)
</UL>

<P><STRONG><a name="[a8]"></a>_printf_lcs_common</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wc (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[2f]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc (via Veneer)
</UL>

<P><STRONG><a name="[31]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls (via Veneer)
</UL>

<P><STRONG><a name="[9d]"></a>_strtoul</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, _strtoul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr (via Veneer)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[97]"></a>_wcrtomb</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table (via Veneer)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r3
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[b6]"></a>strcmp</STRONG> (ARM, 156 bytes, Stack size 4 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[93]"></a>__rt_udiv10</STRONG> (ARM, 44 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real (via Veneer)
</UL>

<P><STRONG><a name="[a5]"></a>_printf_fp_infnan</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[aa]"></a>_chval</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _chval.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[9f]"></a>_btod_etento</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via Veneer)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul (via Veneer)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d9]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv), UNUSED)

<P><STRONG><a name="[3d]"></a>__aeabi_uidivmod</STRONG> (ARM, 36 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv))
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div_large
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div2
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div5
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div8
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK1086_FreqToChan
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT0_ISR
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Stop
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Start
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdBkLtSet
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_Freq_Set
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>

<P><STRONG><a name="[da]"></a>EnterCritical</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2440slib.o(C$$code), UNUSED)

<P><STRONG><a name="[db]"></a>ExitCritical</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2440slib.o(C$$code), UNUSED)

<P><STRONG><a name="[5a]"></a>SET_IF</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2440slib.o(C$$code), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_MoveViewPort
</UL>

<P><STRONG><a name="[dc]"></a>WR_IF</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2440slib.o(C$$code), UNUSED)

<P><STRONG><a name="[5b]"></a>CLR_IF</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2440slib.o(C$$code), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_MoveViewPort
</UL>

<P><STRONG><a name="[dd]"></a>outportw</STRONG> (ARM, 4 bytes, Stack size unknown bytes, 2440slib.o(C$$code), UNUSED)

<P><STRONG><a name="[de]"></a>inportw</STRONG> (ARM, 4 bytes, Stack size unknown bytes, 2440slib.o(C$$code), UNUSED)

<P><STRONG><a name="[df]"></a>MMU_EnableICache</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2440slib.o(C$$code), UNUSED)

<P><STRONG><a name="[e0]"></a>MMU_DisableICache</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2440slib.o(C$$code), UNUSED)

<P><STRONG><a name="[e1]"></a>MMU_EnableDCache</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2440slib.o(C$$code), UNUSED)

<P><STRONG><a name="[e2]"></a>MMU_DisableDCache</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2440slib.o(C$$code), UNUSED)

<P><STRONG><a name="[e3]"></a>MMU_EnableAlignFault</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2440slib.o(C$$code), UNUSED)

<P><STRONG><a name="[e4]"></a>MMU_DisableAlignFault</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2440slib.o(C$$code), UNUSED)

<P><STRONG><a name="[e5]"></a>MMU_EnableMMU</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2440slib.o(C$$code), UNUSED)

<P><STRONG><a name="[e6]"></a>MMU_DisableMMU</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2440slib.o(C$$code), UNUSED)

<P><STRONG><a name="[58]"></a>MMU_SetFastBusMode</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2440slib.o(C$$code), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeClockDivider
</UL>

<P><STRONG><a name="[57]"></a>MMU_SetAsyncBusMode</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2440slib.o(C$$code), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeClockDivider
</UL>

<P><STRONG><a name="[e7]"></a>MMU_SetTTBase</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2440slib.o(C$$code), UNUSED)

<P><STRONG><a name="[e8]"></a>MMU_SetDomain</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2440slib.o(C$$code), UNUSED)

<P><STRONG><a name="[e9]"></a>MMU_InvalidateIDCache</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2440slib.o(C$$code), UNUSED)

<P><STRONG><a name="[ea]"></a>MMU_InvalidateICache</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2440slib.o(C$$code), UNUSED)

<P><STRONG><a name="[eb]"></a>MMU_InvalidateICacheMVA</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2440slib.o(C$$code), UNUSED)

<P><STRONG><a name="[ec]"></a>MMU_PrefetchICacheMVA</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2440slib.o(C$$code), UNUSED)

<P><STRONG><a name="[ed]"></a>MMU_InvalidateDCache</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2440slib.o(C$$code), UNUSED)

<P><STRONG><a name="[ee]"></a>MMU_InvalidateDCacheMVA</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2440slib.o(C$$code), UNUSED)

<P><STRONG><a name="[ef]"></a>MMU_CleanDCacheMVA</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2440slib.o(C$$code), UNUSED)

<P><STRONG><a name="[f0]"></a>MMU_CleanInvalidateDCacheMVA</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2440slib.o(C$$code), UNUSED)

<P><STRONG><a name="[f1]"></a>MMU_CleanDCacheIndex</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2440slib.o(C$$code), UNUSED)

<P><STRONG><a name="[f2]"></a>MMU_CleanInvalidateDCacheIndex</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2440slib.o(C$$code), UNUSED)

<P><STRONG><a name="[f3]"></a>MMU_WaitForInterrupt</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2440slib.o(C$$code), UNUSED)

<P><STRONG><a name="[f4]"></a>MMU_InvalidateTLB</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2440slib.o(C$$code), UNUSED)

<P><STRONG><a name="[f5]"></a>MMU_InvalidateITLB</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2440slib.o(C$$code), UNUSED)

<P><STRONG><a name="[f6]"></a>MMU_InvalidateITLBMVA</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2440slib.o(C$$code), UNUSED)

<P><STRONG><a name="[f7]"></a>MMU_InvalidateDTLB</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2440slib.o(C$$code), UNUSED)

<P><STRONG><a name="[f8]"></a>MMU_InvalidateDTLBMVA</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2440slib.o(C$$code), UNUSED)

<P><STRONG><a name="[f9]"></a>MMU_SetDCacheLockdownBase</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2440slib.o(C$$code), UNUSED)

<P><STRONG><a name="[fa]"></a>MMU_SetICacheLockdownBase</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2440slib.o(C$$code), UNUSED)

<P><STRONG><a name="[fb]"></a>MMU_SetDTLBLockdown</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2440slib.o(C$$code), UNUSED)

<P><STRONG><a name="[fc]"></a>MMU_SetITLBLockdown</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2440slib.o(C$$code), UNUSED)

<P><STRONG><a name="[fd]"></a>MMU_SetProcessId</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2440slib.o(C$$code), UNUSED)

<P><STRONG><a name="[a0]"></a>_btod_d2e</STRONG> (ARM, 56 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via Veneer)
</UL>

<P><STRONG><a name="[b2]"></a>_d2e_denorm_low</STRONG> (ARM, 84 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[b1]"></a>_d2e_norm_op1</STRONG> (ARM, 104 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[b3]"></a>__btod_div_common</STRONG> (ARM, 716 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[b4]"></a>_e2e</STRONG> (ARM, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[a1]"></a>_btod_ediv</STRONG> (ARM, 52 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento (via Veneer)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via Veneer)
</UL>

<P><STRONG><a name="[a2]"></a>_btod_emul</STRONG> (ARM, 52 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento (via Veneer)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via Veneer)
</UL>

<P><STRONG><a name="[b5]"></a>__btod_mult_common</STRONG> (ARM, 616 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[9b]"></a>__ARM_common_call_via_r1</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, __printf.o(i.__ARM_common_call_via_r1), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[8e]"></a>__ARM_common_call_via_r2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_wctomb.o(i.__ARM_common_call_via_r2))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[ab]"></a>__ARM_common_call_via_r3</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _wcrtomb.o(i.__ARM_common_call_via_r3))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>

<P><STRONG><a name="[a4]"></a>__ARM_fpclassify</STRONG> (ARM, 48 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real (via Veneer)
</UL>

<P><STRONG><a name="[6]"></a>_get_lc_ctype</STRONG> (ARM, 80 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[b7]"></a>_get_lc_numeric</STRONG> (ARM, 80 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[41]"></a>__aeabi_dadd</STRONG> (ARM, 0 bytes, Stack size 16 bytes, daddsub_noclz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[b8]"></a>_dadd</STRONG> (ARM, 332 bytes, Stack size 16 bytes, daddsub_noclz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[40]"></a>__aeabi_ddiv</STRONG> (ARM, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[bc]"></a>_ddiv</STRONG> (ARM, 600 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[42]"></a>__aeabi_d2iz</STRONG> (ARM, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[bd]"></a>_dfix</STRONG> (ARM, 112 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[3f]"></a>__aeabi_i2d</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dflt), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[fe]"></a>_dflt</STRONG> (ARM, 88 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[ff]"></a>__dflt_normalise</STRONG> (ARM, 0 bytes, Stack size unknown bytes, dflt_noclz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[bb]"></a>__fpl_dnaninf</STRONG> (ARM, 192 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[ba]"></a>__fpl_dretinf</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[100]"></a>__aeabi_dsub</STRONG> (ARM, 0 bytes, Stack size 32 bytes, daddsub_noclz.o(x$fpl$dsub), UNUSED)

<P><STRONG><a name="[be]"></a>_dsub</STRONG> (ARM, 576 bytes, Stack size 32 bytes, daddsub_noclz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1]"></a>__ieee_status</STRONG> (ARM, 8 bytes, Stack size 0 bytes, istatus.o(x$fpl$ieeestatus))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via Veneer)
</UL>

<P><STRONG><a name="[15]"></a>_printf_fp_dec</STRONG> (ARM, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[101]"></a>__I$use$fp</STRONG> (ARM, 0 bytes, Stack size unknown bytes, usenofp.o(x$fpl$usenofp), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[9]"></a>ResetEntry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2440init.o(RESET))

<P><STRONG><a name="[5]"></a>IsrIRQ</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2440init.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> 2440init.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>copy_proc_beg</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2440init.o(RESET))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartPointAfterSleepWakeUp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 2440init.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>[Anonymous Symbol]</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2440init.o(RESET))
<BR><BR>[Stack]<UL><LI>Max Depth = 156 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; Main &rArr; BK1086_SetFreq &rArr; Radio_Reg_Write &rArr; BEKEN_I2C_sendbyte &rArr; I2C_SCL_L &rArr; ClearGPIO &rArr; Set_GPIO_To_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 2440init.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>Lcd_PowerEnable</STRONG> (ARM, 100 bytes, Stack size 0 bytes, lcd_tft.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_TFT_Init
</UL>

<P><STRONG><a name="[af]"></a>__arm_div8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[ae]"></a>__arm_div5</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[ad]"></a>__arm_div2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[b0]"></a>__arm_div_large</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[bf]"></a>_dadd1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, daddsub_noclz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[b9]"></a>_dsub1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, daddsub_noclz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[8]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[9e]"></a>_fp_digits</STRONG> (Thumb, 408 bytes, Stack size 88 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status (via Veneer)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul (via Veneer)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv (via Veneer)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e (via Veneer)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[19]"></a>_printf_fp_hex</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[a7]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[a9]"></a>_printf_wc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<HR></body></html>
